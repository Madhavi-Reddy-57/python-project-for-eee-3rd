# -*- coding: utf-8 -*-
"""madhavi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nZ9ZCsOTMUrmNgFuYyTqeOzboNjWlKOb
"""

# Creating a list
my_list = [1, 2, 3, "apple", "banana"]
print(f"Original list: {my_list}")

# Accessing elements
print(f"First element: {my_list[0]}")
print(f"Last element: {my_list[-1]}")

# Modifying elements
my_list[1] = 5
print(f"Modified list: {my_list}")

# Adding elements
my_list.append("orange")
print(f"List after append: {my_list}")
my_list.insert(1, "grape")
print(f"List after insert: {my_list}")

# Removing elements
my_list.remove("apple")
print(f"List after remove: {my_list}")
popped_element = my_list.pop()
print(f"List after pop: {my_list}, Popped element: {popped_element}")

# Creating a tuple
my_tuple = (10, 20, "cat", "dog")
print(f"Original tuple: {my_tuple}")

# Accessing elements
print(f"First element: {my_tuple[0]}")
print(f"Last element: {my_tuple[-1]}")

# Tuples are immutable, so elements cannot be modified or added/removed directly.
# Attempting to do so will raise an error.
# my_tuple[0] = 15  # This would raise a TypeError
# my_tuple.append("bird") # This would raise an AttributeError

# Tuple unpacking
a, b, c, d = my_tuple
print(f"Unpacked elements: {a}, {b}, {c}, {d}")

# Creating a set
my_set = {1, 2, 3, 2, 4} # Duplicate '2' will be ignored
print(f"Original set: {my_set}")

# Adding elements
my_set.add(5)
print(f"Set after add: {my_set}")

# Removing elements
my_set.remove(1)
print(f"Set after remove: {my_set}")
# my_set.remove(10) # This would raise a KeyError if element not found

# Set operations
set1 = {1, 2, 3}
set2 = {3, 4, 5}
print(f"Union: {set1.union(set2)}")
print(f"Intersection: {set1.intersection(set2)}")
print(f"Difference (set1 - set2): {set1.difference(set2)}")

# Creating a dictionary
my_dict = {"name": "Alice", "age": 30, "city": "New York"}
print(f"Original dictionary: {my_dict}")

# Accessing values
print(f"Name: {my_dict['name']}")
print(f"Age: {my_dict.get('age')}") # Using get() avoids KeyError if key not found

# Modifying values
my_dict["age"] = 31
print(f"Modified dictionary: {my_dict}")

# Adding new key-value pairs
my_dict["occupation"] = "Engineer"
print(f"Dictionary after adding: {my_dict}")

# Removing key-value pairs
removed_value = my_dict.pop("city")
print(f"Dictionary after pop: {my_dict}, Removed city: {removed_value}")
del my_dict["name"]
print(f"Dictionary after del: {my_dict}")

# Iterating through dictionary
for key, value in my_dict.items():
    print(f"{key}: {value}")

# Simulation parameters
setpoint = 100  # Desired motor speed (RPM)
Kp = 0.1       # Proportional gain
Ki = 0.01      # Integral gain
Kd = 0.05      # Derivative gain
dt = 0.1       # Time step for simulation (seconds)
sim_time = 150 # Total simulation time (seconds)

# Initialize variables
integral = 0
previous_error = 0
motor_speed = 0  # Initial motor speed (RPM)

# Store data for plotting
time_data = []
speed_data = []

# Simulation loop
for t in np.arange(0, sim_time, dt):
    # Calculate error
    error = setpoint - motor_speed

    # Proportional term
    P_term = Kp * error

    # Integral term
    integral += error * dt
    I_term = Ki * integral

    # Derivative term
    derivative = (error - previous_error) / dt
    D_term = Kd * derivative

    # Calculate control output
    output = P_term + I_term + D_term

    # Update motor speed (simple model)
    motor_speed += output * dt

    # Store data for plotting
    time_data.append(t)
    speed_data.append(motor_speed)